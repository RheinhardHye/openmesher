import logging, interfaces, os
from StringIO import StringIO
from datetime import datetime

class Quagga(interfaces.IOpenMesherConfigPlugin):
    def __init__(self):
        self._quaggafiles = {}
    
    def _readfile(self, fname):
        fdata = ''
        if os.path.exists(fname):
            logging.debug('Importing %s' %(fname))
            rfh = open(fname)
            for line in rfh:
                fdata += line
            rfh.close()    
            return fdata
        return None
    
    def setupargs(self, parser):
        parser.add_argument('--password', action='store', help='Specify quagga password')
        parser.add_argument('--enablepassword', action='store', help='Specify quagga enable password')
    
    def process(self, mesh, cliargs = None):
        logging.debug('Generating Quagga config...')
        self._quaggafiles = {}
        
        for router in mesh.links:
            #BUG: Hostnames probably shouldn't be FQDNs, but actual hostnames
            
            zebra = StringIO()
            zebra.write('!\n')
            zebra.write('! Zebra configuration generated by OpenMesher\n')
            zebra.write('!   %s\n' %(datetime.strftime(datetime.now(), '%A, %d %B %Y %H:%M:%S -0800')))
            zebra.write('!\n')
            zebra.write('hostname %s\n' %(router))
            
            if cliargs.password and cliargs.enablepassword:
                zebra.write('password %s\n' %(cliargs.password))
                zebra.write('enable password %s\n' %(cliargs.enablepassword))
            elif cliargs.password and not cliargs.enablepassword:
                zebra.write('password %s\n' %(cliargs.password))
                zebra.write('enable password %s\n' %(cliargs.password))
            elif cliargs.enablepassword and not cliargs.password:
                zebra.write('password %s\n' %(cliargs.enablepassword))
                zebra.write('enable password %s\n' %(cliargs.enablepassword))
            else:
                logging.warn("You did not provide a password or enable password for quagga, using the default 'secret123' for router %s" %(router))
                zebra.write('password secret123\n')
                zebra.write('enable password secret123\n')
            
            zebra.write('service advanced-vty\n')
            zebra.write('service password-encryption\n')
            zebra.write('service terminal-length 0\n')
            zebra.write('ip forwarding\n')
            zebra.write('!\n')
            zebra.write(self._readfile('./%s/zebra.main' %(router)))
            zebra.write('line vty\n')
            zebra.write('!\n')
            
            ripd = StringIO()
            ripdnets = StringIO()
            ripddl = StringIO()
            
            ripd.write('!\n')
            ripd.write('! Zebra configuration generated by OpenMesher\n')
            ripd.write('!   %s\n' %(datetime.strftime(datetime.now(), '%A, %d %B %Y %H:%M:%S -0800')))
            ripd.write('!\n')
            ripd.write('hostname %s\n' %(router))
            
            if cliargs.password and cliargs.enablepassword:
                ripd.write('password %s\n' %(cliargs.password))
                ripd.write('enable password %s\n' %(cliargs.enablepassword))
            elif cliargs.password and not cliargs.enablepassword:
                ripd.write('password %s\n' %(cliargs.password))
                ripd.write('enable password %s\n' %(cliargs.password))
            elif cliargs.enablepassword and not cliargs.password:
                ripd.write('password %s\n' %(cliargs.enablepassword))
                ripd.write('enable password %s\n' %(cliargs.enablepassword))
            else:
                logging.warn("You did not provide a password or enable password for zebra, using the default 'secret123' for router %s" %(router))
                ripd.write('password secret123\n')
                ripd.write('enable password secret123\n')
            
            ripd.write('log syslog\n')
            ripd.write('service advanced-vty\n')
            ripd.write('service password-encryption\n')
            ripd.write('service terminal-length 0\n')
            ripd.write(self._readfile('./%s/ripd.main' %(router)))
            ripd.write('!\n')
            
            for link in mesh.links[router]:
                #BUG: Need to allow for adding custom interfaces by router FQDN from a text file
                ripd.write('interface %s\n' %(link.iface))
                ripd.write(' description %s\n' %(link.linkname()))
                ripd.write(' ip rip split-horizon poisoned-reverse\n')
                ripd.write(' ip rip send version 2\n')
                ripd.write(' ip rip receive version 2\n')
                ripd.write('!\n')
                #BUG: Need to allow for adding custom interfaces by router FQDN from a text file
                ripdnets.write(' network %s\n' %(link.iface))
                #BUG: Need to allow user to speficy their own access lists
                ripddl.write(' distribute-list p2pallow in %s\n' %(link.iface))
                ripddl.write(' distribute-list p2pallow out %s\n' %(link.iface))
            
            ripd.write(self._readfile('./%s/ripd.interfaces' %(router)))
            
            ripd.write('router rip\n')
            ripd.write(' timers basic 15 60 120\n')
            ripd.write(' redistribute kernel\n')
            ripd.write(' redistribute connected metric 1\n')
            ripd.write(' redistribute static\n')
            
            ripd.write(self._readfile('./%s/ripd.router' %(router)))
            
            ripd.write(ripdnets.getvalue())
            ripd.write(ripddl.getvalue())
            ripd.write(' distance 1\n')
            ripd.write('!\n')
            #BUG: Need to allow user to speficy their own access lists
            ripd.write('access-list p2pallow permit 10.0.0.0/8\n')
            ripd.write('access-list p2pallow permit 192.168.42.0/24\n')
            ripd.write('access-list p2pallow deny any\n')
            ripd.write(self._readfile('./%s/quagga.acl' %(router)))
            ripd.write('!\n')
            ripd.write('line vty\n')
            ripd.write(' exec-timeout 0 0\n')
            ripd.write('!\n')
            
            self._quaggafiles[router] = {'/quagga/zebra.conf': zebra.getvalue(), '/quagga/ripd.conf': ripd.getvalue()}
    
    def files(self):
        """ Return a dictionary of routers containing a dictionary of filenames and contents """
        return self._quaggafiles

